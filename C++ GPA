//Header File named: StudentNameGPA.h
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class StudentNameGPA
{
private:
	string stName;
	double stGPA;
public:
	StudentNameGPA(string = "-", double = 0.0);
	//-- mutators
	void setStName(string);
	void setStGPA(double);
	//-- accessors
	string getStName() const;
	double getStGPA() const;
	//-- other functions
	void print() const;
};
//.cpp file named: StudentNameGPA.cpp
#include "StudentNameGPA.h"

StudentNameGPA::StudentNameGPA(string param_name, double param_gpa)
{
	stName = "-";
	stGPA = 0;
	setStName(param_name);
	setStGPA(param_gpa);
}

void StudentNameGPA::setStName(string param_name)
{
	if (param_name == "")
		cout << "Name cannot be blank\n";
	else
		stName = param_name;
}

void StudentNameGPA::setStGPA(double param_gpa)
{
	if (param_gpa < 0)
		cout << "GPA cannot be less than 0\n";
	else
		stGPA = param_gpa;
}

string StudentNameGPA::getStName() const
{
	return stName;
}

double StudentNameGPA::getStGPA() const
{
	return stGPA;
}

void StudentNameGPA::print() const
{
	cout << fixed << setprecision(3);
	cout << setw(15) << left << stName
		<< setw(6) << right << stGPA << endl;
}
//tester file
/*
Chapter 9 assignment. Create a class, StudentNameGPA, to hold
- student name
- student gpa

In the class tester, create an array of StudentNameGPA
objects.
Sort and search through this array
*/
#include <iostream>
#include <string>
#include <ctime>
#include <iomanip>
using namespace std;

#include "StudentNameGPA.h"
void shuffle_array(StudentNameGPA[], int);
void print_array(StudentNameGPA[], int);
void sort_array_by_gpa(StudentNameGPA[], int);
void sort_array_by_name(StudentNameGPA[], int);
double getAverageGPA(StudentNameGPA[], int);

int main()
{
	srand(time(NULL));
	const int SIZE = 7;
	StudentNameGPA arr_stu[SIZE] = {
		StudentNameGPA("Aname", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Bname", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Cname", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Dname", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Ename", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Fname", (rand() % 201 + 200) / 100.0),
		StudentNameGPA("Gname", (rand() % 201 + 200) / 100.0)
	};
	shuffle_array(arr_stu, SIZE);

	cout << "--- after shuffle -----\n";


	sort_array_by_name(arr_stu, SIZE);
	cout << "--- sorted by name -----\n";
	print_array(arr_stu, SIZE);

	sort_array_by_gpa(arr_stu, SIZE);
	cout << "-- sorted by gpa --- \n";
	print_array(arr_stu, SIZE);

	cout << setprecision(2) << fixed
		<< "\nAverage GPA = "
		<< getAverageGPA(arr_stu, SIZE)
		<< endl;
	return 0;
}
void shuffle_array(StudentNameGPA arr_param[], int size)
{
	for (int i = 0; i < size * 10; i++)
	{
		int sub1 = rand() % size, sub2 = rand() % size;
		swap(arr_param[sub1], arr_param[sub2]);
	}
}
double getAverageGPA(StudentNameGPA arr_param[], int size)
{
	double totalGpa = 0;

	for (int i = 0; i < size; i++) {
		totalGpa += arr_param[i].getStGPA();

	}


	return totalGpa / size;
}
void sort_array_by_gpa(StudentNameGPA arr_param[], int size)

{
	int i, j, min;
	double temp;
	for (i = 0; i < size - 1; i++) {
		min = i;
		for (j = i + 1; j < size; j++)
			if (arr_param[j].getStGPA() < arr_param[min].getStGPA())
				min = j;
		temp = arr_param[i].getStGPA();
		arr_param[i].setStGPA(arr_param[min].getStGPA());
		arr_param[min].setStGPA(temp);

	}
}
void sort_array_by_name(StudentNameGPA arr_param[], int size)
{
	int i, j, min;
	double string;
	for (i = 0; i < size - 1; i++) {
		min = i;
		for (j = i + 1; j < size; j++)
			if (arr_param[j].getStName() < arr_param[min].getStName())
				min = j;
		string = arr_param[i].getStName();
		arr_param[i].setStName(arr_param[min].getStName());
		arr_param[min].setStName(temp);

	}
}
void print_array(StudentNameGPA arr_param[], int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << setw(2) << right << (i + 1) << ". ";
		arr_param[i].print();
	}
}
